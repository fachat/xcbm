diff --git a/src/debugger.c b/src/debugger.c
index 9acff2c..6ad3e11 100644
--- a/src/debugger.c
+++ b/src/debugger.c
@@ -17,6 +17,8 @@
 
 #include "cpumicro.h"
 
+extern FILE *flog;
+
 /* 65816 debugger module */
 
 char *mnemonics[256] = {
@@ -132,13 +134,13 @@ void CPU_debug(void) {
 
 	opcode = M_READ(PC.A);
 	mode = addrmodes[opcode];
-	printf("A=%04X X=%04X Y=%04X S=%04X D=%04X B=%02X P=%02X (%c%c%c%c%c%c%c%c) E=%1d  ",
+	fprintf(flog, "A=%04X X=%04X Y=%04X S=%04X D=%04X B=%02X P=%02X (%c%c%c%c%c%c%c%c) E=%1d  ",
 			(int) A.W, (int) X.W, (int) Y.W, (int) S.W, (int) D.W, (int) DB,
 			(int) P,
 			(F_getN?'N':'n'), (F_getV?'V':'v'), (F_getM?'M':'m'), (F_getX?'X':'x'),
 			(F_getD?'D':'d'), (F_getI?'I':'i'), (F_getZ?'Z':'z'), (F_getC?'C':'c'),
 			(int) E);
-	printf("%02X/%04X  %s ",(int) PC.B.PB,(int) PC.W.PC,mnemonics[opcode]);
+	fprintf(flog, "%02X/%04X  %s ",(int) PC.B.PB,(int) PC.W.PC,mnemonics[opcode]);
 	switch (mode) {
         case IMM8:
             sprintf( operands, "#$%02X", M_READ(PC.A+1) );
@@ -314,8 +316,8 @@ void CPU_debug(void) {
             sprintf( operands, "$%02X, $%02X", M_READ(PC.A+2), M_READ(PC.A+1) );
             break;
 	}
-    printf( "%s\n", operands );
-	fflush(stdout);
+    fprintf( flog, "%s\n", operands );
+	fflush(flog);
 }
 
 #endif
